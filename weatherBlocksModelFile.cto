namespace org.dltcamp.weatherBlocks
/**
  The smart contract that pays out the insurance @param notional in case the conditions are met:
  IF on any day in between @param start and @param end the average daily temperature on the @param observedSensor is above the threshold, then pay the @param notional from the @param seller to the @param buyer
  ELSE
    do nothing
  ENDIF
 */
asset Contract identified by contractId {
  o String contractId
  --> Farmer buyer //seeks protection
  --> Underwriter seller //offers protection
  --> Sensor observedSensor
  o Double premium
  o Double notional
  o Double threshold
  o DateTime start
  o DateTime end
  o ContractStatus status
  //Payout conditions, could be made more generic
 }

enum ContractStatus {
  o LIVE // after initiation
  o DEAD // when time-out event occured
  o SETTLED // when pay-out event occured
}

asset Sensor identified by sensorId {
  o String sensorId
  o String latitude
  o String longitude
  o SensorData[] dataPoints optional
}

concept SensorData {
  o DateTime time
  o DataType type
  o Double value
}

abstract transaction SensorReadingTransaction {
    --> Sensor sensor
    o SensorData sensorData
}

transaction TemperatureReading extends SensorReadingTransaction{
  o Double temperature
}

enum DataType {
  o AIR_HUMIDITY
  o SOIL_HUMIDITY
  o TEMPERATURE
  o AIR_PRESSURE
  o RAIN_FALL
}


event ContractTimeOut {
  --> Contract contract
}

event ContractPayOut {
  --> Contract contract
}


/***
Types of data points:
  o Double airHumidity // in %
  o Double soilHumidity // in %
  o Double temperature // in Â°C
  o Double airPressure // in hPa
  o Double rainFall // in mm
 */

/**
 * An abstract transaction that is related to a sensor
 */


transaction PressureReading extends SensorReadingTransaction{
  o Double pressure
}

transaction AirHumidityReading extends SensorReadingTransaction{
  o Double airHumidity
}

transaction SoilHumidityReading extends SensorReadingTransaction{
  o Double soilHumidity
}


/**
 * An abstract participant type in this business network
 */
abstract participant Business identified by email {
  o String email
  o Double accountBalance
}

/**
 * A Farmer is a type of participant in the network, typically the buyer of the contract
 */
participant Farmer extends Business {
}

/**
 * An Underwriter is a type of participant in the network, typically seller of the contract, calculating also the price of the contract based on his pricing model
 */
participant Underwriter extends Business {
}

